// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime? @default(now())
  emailVerified  DateTime? @map("verifiedAt")

  accounts     Account[]
  reservations Reservation[]
  Payment      Payment[]
  CartItem     CartItem[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  carId      String?
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  isBlocked  Boolean  @default(false) // Add the isBlocked field

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Payment Payment[]
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  reservationId String?  @db.ObjectId
  amount        Int
  createdAt     DateTime @default(now())

  user        User         @relation(fields: [userId], references: [id])
  reservation Reservation? @relation(fields: [reservationId], references: [id])

  @@map("payments")
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  make       String?
  model      String?
  year       Int?
  userId     String   @db.ObjectId
  carId      String?
  startDate  DateTime
  endDate    DateTime
  totalPrice Int
  createdAt  DateTime @default(now())
  // Add any other fields related to the cart item

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
